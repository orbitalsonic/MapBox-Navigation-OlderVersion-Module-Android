

package com.mapbox.services.android.navigation.v5.routeprogress;

import androidx.annotation.Nullable;
import com.mapbox.api.directions.v5.models.MaxSpeed;

// Generated by com.google.auto.value.processor.AutoValueProcessor
 final class AutoValue_CurrentLegAnnotation extends CurrentLegAnnotation {

  private final int index;
  private final double distanceToAnnotation;
  private final Double distance;
  private final Double duration;
  private final Double speed;
  private final MaxSpeed maxspeed;
  private final String congestion;

  private AutoValue_CurrentLegAnnotation(
      int index,
      double distanceToAnnotation,
      Double distance,
      @Nullable Double duration,
      @Nullable Double speed,
      @Nullable MaxSpeed maxspeed,
      @Nullable String congestion) {
    this.index = index;
    this.distanceToAnnotation = distanceToAnnotation;
    this.distance = distance;
    this.duration = duration;
    this.speed = speed;
    this.maxspeed = maxspeed;
    this.congestion = congestion;
  }

  @Override
  public int index() {
    return index;
  }

  @Override
  public double distanceToAnnotation() {
    return distanceToAnnotation;
  }

  @Override
  public Double distance() {
    return distance;
  }

  @Nullable
  @Override
  public Double duration() {
    return duration;
  }

  @Nullable
  @Override
  public Double speed() {
    return speed;
  }

  @Nullable
  @Override
  public MaxSpeed maxspeed() {
    return maxspeed;
  }

  @Nullable
  @Override
  public String congestion() {
    return congestion;
  }

  @Override
  public String toString() {
    return "CurrentLegAnnotation{"
         + "index=" + index + ", "
         + "distanceToAnnotation=" + distanceToAnnotation + ", "
         + "distance=" + distance + ", "
         + "duration=" + duration + ", "
         + "speed=" + speed + ", "
         + "maxspeed=" + maxspeed + ", "
         + "congestion=" + congestion
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof CurrentLegAnnotation) {
      CurrentLegAnnotation that = (CurrentLegAnnotation) o;
      return (this.index == that.index())
           && (Double.doubleToLongBits(this.distanceToAnnotation) == Double.doubleToLongBits(that.distanceToAnnotation()))
           && (this.distance.equals(that.distance()))
           && ((this.duration == null) ? (that.duration() == null) : this.duration.equals(that.duration()))
           && ((this.speed == null) ? (that.speed() == null) : this.speed.equals(that.speed()))
           && ((this.maxspeed == null) ? (that.maxspeed() == null) : this.maxspeed.equals(that.maxspeed()))
           && ((this.congestion == null) ? (that.congestion() == null) : this.congestion.equals(that.congestion()));
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h$ = 1;
    h$ *= 1000003;
    h$ ^= index;
    h$ *= 1000003;
    h$ ^= (int) ((Double.doubleToLongBits(distanceToAnnotation) >>> 32) ^ Double.doubleToLongBits(distanceToAnnotation));
    h$ *= 1000003;
    h$ ^= distance.hashCode();
    h$ *= 1000003;
    h$ ^= (duration == null) ? 0 : duration.hashCode();
    h$ *= 1000003;
    h$ ^= (speed == null) ? 0 : speed.hashCode();
    h$ *= 1000003;
    h$ ^= (maxspeed == null) ? 0 : maxspeed.hashCode();
    h$ *= 1000003;
    h$ ^= (congestion == null) ? 0 : congestion.hashCode();
    return h$;
  }

  static final class Builder extends CurrentLegAnnotation.Builder {
    private Integer index;
    private Double distanceToAnnotation;
    private Double distance;
    private Double duration;
    private Double speed;
    private MaxSpeed maxspeed;
    private String congestion;
    Builder() {
    }
    @Override
    public CurrentLegAnnotation.Builder index(int index) {
      this.index = index;
      return this;
    }
    @Override
    public CurrentLegAnnotation.Builder distanceToAnnotation(double distanceToAnnotation) {
      this.distanceToAnnotation = distanceToAnnotation;
      return this;
    }
    @Override
    public CurrentLegAnnotation.Builder distance(Double distance) {
      if (distance == null) {
        throw new NullPointerException("Null distance");
      }
      this.distance = distance;
      return this;
    }
    @Override
    public CurrentLegAnnotation.Builder duration(@Nullable Double duration) {
      this.duration = duration;
      return this;
    }
    @Override
    public CurrentLegAnnotation.Builder speed(@Nullable Double speed) {
      this.speed = speed;
      return this;
    }
    @Override
    public CurrentLegAnnotation.Builder maxspeed(@Nullable MaxSpeed maxspeed) {
      this.maxspeed = maxspeed;
      return this;
    }
    @Override
    public CurrentLegAnnotation.Builder congestion(@Nullable String congestion) {
      this.congestion = congestion;
      return this;
    }
    @Override
    public CurrentLegAnnotation build() {
      String missing = "";
      if (this.index == null) {
        missing += " index";
      }
      if (this.distanceToAnnotation == null) {
        missing += " distanceToAnnotation";
      }
      if (this.distance == null) {
        missing += " distance";
      }
      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new AutoValue_CurrentLegAnnotation(
          this.index,
          this.distanceToAnnotation,
          this.distance,
          this.duration,
          this.speed,
          this.maxspeed,
          this.congestion);
    }
  }

}
