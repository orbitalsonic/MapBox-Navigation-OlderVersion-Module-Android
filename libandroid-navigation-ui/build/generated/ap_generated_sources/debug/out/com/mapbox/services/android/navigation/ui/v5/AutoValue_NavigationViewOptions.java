

package com.mapbox.services.android.navigation.ui.v5;

import androidx.annotation.Nullable;
import com.google.android.material.bottomsheet.BottomSheetBehavior;
import com.mapbox.android.core.location.LocationEngine;
import com.mapbox.api.directions.v5.models.DirectionsRoute;
import com.mapbox.services.android.navigation.ui.v5.listeners.BannerInstructionsListener;
import com.mapbox.services.android.navigation.ui.v5.listeners.FeedbackListener;
import com.mapbox.services.android.navigation.ui.v5.listeners.InstructionListListener;
import com.mapbox.services.android.navigation.ui.v5.listeners.NavigationListener;
import com.mapbox.services.android.navigation.ui.v5.listeners.RouteListener;
import com.mapbox.services.android.navigation.ui.v5.listeners.SpeechAnnouncementListener;
import com.mapbox.services.android.navigation.ui.v5.voice.SpeechPlayer;
import com.mapbox.services.android.navigation.v5.milestone.Milestone;
import com.mapbox.services.android.navigation.v5.milestone.MilestoneEventListener;
import com.mapbox.services.android.navigation.v5.navigation.MapboxNavigationOptions;
import com.mapbox.services.android.navigation.v5.routeprogress.ProgressChangeListener;
import java.util.List;

// Generated by com.google.auto.value.processor.AutoValueProcessor
 final class AutoValue_NavigationViewOptions extends NavigationViewOptions {

  private final DirectionsRoute directionsRoute;
  private final Integer lightThemeResId;
  private final Integer darkThemeResId;
  private final boolean shouldSimulateRoute;
  private final boolean waynameChipEnabled;
  private final String offlineRoutingTilesPath;
  private final String offlineRoutingTilesVersion;
  private final MapOfflineOptions offlineMapOptions;
  private final MapboxNavigationOptions navigationOptions;
  private final FeedbackListener feedbackListener;
  private final RouteListener routeListener;
  private final NavigationListener navigationListener;
  private final ProgressChangeListener progressChangeListener;
  private final MilestoneEventListener milestoneEventListener;
  private final List<Milestone> milestones;
  private final BottomSheetBehavior.BottomSheetCallback bottomSheetCallback;
  private final InstructionListListener instructionListListener;
  private final SpeechAnnouncementListener speechAnnouncementListener;
  private final BannerInstructionsListener bannerInstructionsListener;
  private final SpeechPlayer speechPlayer;
  private final LocationEngine locationEngine;

  private AutoValue_NavigationViewOptions(
      DirectionsRoute directionsRoute,
      @Nullable Integer lightThemeResId,
      @Nullable Integer darkThemeResId,
      boolean shouldSimulateRoute,
      boolean waynameChipEnabled,
      @Nullable String offlineRoutingTilesPath,
      @Nullable String offlineRoutingTilesVersion,
      @Nullable MapOfflineOptions offlineMapOptions,
      MapboxNavigationOptions navigationOptions,
      @Nullable FeedbackListener feedbackListener,
      @Nullable RouteListener routeListener,
      @Nullable NavigationListener navigationListener,
      @Nullable ProgressChangeListener progressChangeListener,
      @Nullable MilestoneEventListener milestoneEventListener,
      @Nullable List<Milestone> milestones,
      @Nullable BottomSheetBehavior.BottomSheetCallback bottomSheetCallback,
      @Nullable InstructionListListener instructionListListener,
      @Nullable SpeechAnnouncementListener speechAnnouncementListener,
      @Nullable BannerInstructionsListener bannerInstructionsListener,
      @Nullable SpeechPlayer speechPlayer,
      @Nullable LocationEngine locationEngine) {
    this.directionsRoute = directionsRoute;
    this.lightThemeResId = lightThemeResId;
    this.darkThemeResId = darkThemeResId;
    this.shouldSimulateRoute = shouldSimulateRoute;
    this.waynameChipEnabled = waynameChipEnabled;
    this.offlineRoutingTilesPath = offlineRoutingTilesPath;
    this.offlineRoutingTilesVersion = offlineRoutingTilesVersion;
    this.offlineMapOptions = offlineMapOptions;
    this.navigationOptions = navigationOptions;
    this.feedbackListener = feedbackListener;
    this.routeListener = routeListener;
    this.navigationListener = navigationListener;
    this.progressChangeListener = progressChangeListener;
    this.milestoneEventListener = milestoneEventListener;
    this.milestones = milestones;
    this.bottomSheetCallback = bottomSheetCallback;
    this.instructionListListener = instructionListListener;
    this.speechAnnouncementListener = speechAnnouncementListener;
    this.bannerInstructionsListener = bannerInstructionsListener;
    this.speechPlayer = speechPlayer;
    this.locationEngine = locationEngine;
  }

  @Override
  public DirectionsRoute directionsRoute() {
    return directionsRoute;
  }

  @Nullable
  @Override
  public Integer lightThemeResId() {
    return lightThemeResId;
  }

  @Nullable
  @Override
  public Integer darkThemeResId() {
    return darkThemeResId;
  }

  @Override
  public boolean shouldSimulateRoute() {
    return shouldSimulateRoute;
  }

  @Override
  public boolean waynameChipEnabled() {
    return waynameChipEnabled;
  }

  @Nullable
  @Override
  public String offlineRoutingTilesPath() {
    return offlineRoutingTilesPath;
  }

  @Nullable
  @Override
  public String offlineRoutingTilesVersion() {
    return offlineRoutingTilesVersion;
  }

  @Nullable
  @Override
  public MapOfflineOptions offlineMapOptions() {
    return offlineMapOptions;
  }

  @Override
  public MapboxNavigationOptions navigationOptions() {
    return navigationOptions;
  }

  @Nullable
  @Override
  public FeedbackListener feedbackListener() {
    return feedbackListener;
  }

  @Nullable
  @Override
  public RouteListener routeListener() {
    return routeListener;
  }

  @Nullable
  @Override
  public NavigationListener navigationListener() {
    return navigationListener;
  }

  @Nullable
  @Override
  public ProgressChangeListener progressChangeListener() {
    return progressChangeListener;
  }

  @Nullable
  @Override
  public MilestoneEventListener milestoneEventListener() {
    return milestoneEventListener;
  }

  @Nullable
  @Override
  public List<Milestone> milestones() {
    return milestones;
  }

  @Nullable
  @Override
  public BottomSheetBehavior.BottomSheetCallback bottomSheetCallback() {
    return bottomSheetCallback;
  }

  @Nullable
  @Override
  public InstructionListListener instructionListListener() {
    return instructionListListener;
  }

  @Nullable
  @Override
  public SpeechAnnouncementListener speechAnnouncementListener() {
    return speechAnnouncementListener;
  }

  @Nullable
  @Override
  public BannerInstructionsListener bannerInstructionsListener() {
    return bannerInstructionsListener;
  }

  @Nullable
  @Override
  public SpeechPlayer speechPlayer() {
    return speechPlayer;
  }

  @Nullable
  @Override
  public LocationEngine locationEngine() {
    return locationEngine;
  }

  @Override
  public String toString() {
    return "NavigationViewOptions{"
         + "directionsRoute=" + directionsRoute + ", "
         + "lightThemeResId=" + lightThemeResId + ", "
         + "darkThemeResId=" + darkThemeResId + ", "
         + "shouldSimulateRoute=" + shouldSimulateRoute + ", "
         + "waynameChipEnabled=" + waynameChipEnabled + ", "
         + "offlineRoutingTilesPath=" + offlineRoutingTilesPath + ", "
         + "offlineRoutingTilesVersion=" + offlineRoutingTilesVersion + ", "
         + "offlineMapOptions=" + offlineMapOptions + ", "
         + "navigationOptions=" + navigationOptions + ", "
         + "feedbackListener=" + feedbackListener + ", "
         + "routeListener=" + routeListener + ", "
         + "navigationListener=" + navigationListener + ", "
         + "progressChangeListener=" + progressChangeListener + ", "
         + "milestoneEventListener=" + milestoneEventListener + ", "
         + "milestones=" + milestones + ", "
         + "bottomSheetCallback=" + bottomSheetCallback + ", "
         + "instructionListListener=" + instructionListListener + ", "
         + "speechAnnouncementListener=" + speechAnnouncementListener + ", "
         + "bannerInstructionsListener=" + bannerInstructionsListener + ", "
         + "speechPlayer=" + speechPlayer + ", "
         + "locationEngine=" + locationEngine
        + "}";
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof NavigationViewOptions) {
      NavigationViewOptions that = (NavigationViewOptions) o;
      return (this.directionsRoute.equals(that.directionsRoute()))
           && ((this.lightThemeResId == null) ? (that.lightThemeResId() == null) : this.lightThemeResId.equals(that.lightThemeResId()))
           && ((this.darkThemeResId == null) ? (that.darkThemeResId() == null) : this.darkThemeResId.equals(that.darkThemeResId()))
           && (this.shouldSimulateRoute == that.shouldSimulateRoute())
           && (this.waynameChipEnabled == that.waynameChipEnabled())
           && ((this.offlineRoutingTilesPath == null) ? (that.offlineRoutingTilesPath() == null) : this.offlineRoutingTilesPath.equals(that.offlineRoutingTilesPath()))
           && ((this.offlineRoutingTilesVersion == null) ? (that.offlineRoutingTilesVersion() == null) : this.offlineRoutingTilesVersion.equals(that.offlineRoutingTilesVersion()))
           && ((this.offlineMapOptions == null) ? (that.offlineMapOptions() == null) : this.offlineMapOptions.equals(that.offlineMapOptions()))
           && (this.navigationOptions.equals(that.navigationOptions()))
           && ((this.feedbackListener == null) ? (that.feedbackListener() == null) : this.feedbackListener.equals(that.feedbackListener()))
           && ((this.routeListener == null) ? (that.routeListener() == null) : this.routeListener.equals(that.routeListener()))
           && ((this.navigationListener == null) ? (that.navigationListener() == null) : this.navigationListener.equals(that.navigationListener()))
           && ((this.progressChangeListener == null) ? (that.progressChangeListener() == null) : this.progressChangeListener.equals(that.progressChangeListener()))
           && ((this.milestoneEventListener == null) ? (that.milestoneEventListener() == null) : this.milestoneEventListener.equals(that.milestoneEventListener()))
           && ((this.milestones == null) ? (that.milestones() == null) : this.milestones.equals(that.milestones()))
           && ((this.bottomSheetCallback == null) ? (that.bottomSheetCallback() == null) : this.bottomSheetCallback.equals(that.bottomSheetCallback()))
           && ((this.instructionListListener == null) ? (that.instructionListListener() == null) : this.instructionListListener.equals(that.instructionListListener()))
           && ((this.speechAnnouncementListener == null) ? (that.speechAnnouncementListener() == null) : this.speechAnnouncementListener.equals(that.speechAnnouncementListener()))
           && ((this.bannerInstructionsListener == null) ? (that.bannerInstructionsListener() == null) : this.bannerInstructionsListener.equals(that.bannerInstructionsListener()))
           && ((this.speechPlayer == null) ? (that.speechPlayer() == null) : this.speechPlayer.equals(that.speechPlayer()))
           && ((this.locationEngine == null) ? (that.locationEngine() == null) : this.locationEngine.equals(that.locationEngine()));
    }
    return false;
  }

  @Override
  public int hashCode() {
    int h$ = 1;
    h$ *= 1000003;
    h$ ^= directionsRoute.hashCode();
    h$ *= 1000003;
    h$ ^= (lightThemeResId == null) ? 0 : lightThemeResId.hashCode();
    h$ *= 1000003;
    h$ ^= (darkThemeResId == null) ? 0 : darkThemeResId.hashCode();
    h$ *= 1000003;
    h$ ^= shouldSimulateRoute ? 1231 : 1237;
    h$ *= 1000003;
    h$ ^= waynameChipEnabled ? 1231 : 1237;
    h$ *= 1000003;
    h$ ^= (offlineRoutingTilesPath == null) ? 0 : offlineRoutingTilesPath.hashCode();
    h$ *= 1000003;
    h$ ^= (offlineRoutingTilesVersion == null) ? 0 : offlineRoutingTilesVersion.hashCode();
    h$ *= 1000003;
    h$ ^= (offlineMapOptions == null) ? 0 : offlineMapOptions.hashCode();
    h$ *= 1000003;
    h$ ^= navigationOptions.hashCode();
    h$ *= 1000003;
    h$ ^= (feedbackListener == null) ? 0 : feedbackListener.hashCode();
    h$ *= 1000003;
    h$ ^= (routeListener == null) ? 0 : routeListener.hashCode();
    h$ *= 1000003;
    h$ ^= (navigationListener == null) ? 0 : navigationListener.hashCode();
    h$ *= 1000003;
    h$ ^= (progressChangeListener == null) ? 0 : progressChangeListener.hashCode();
    h$ *= 1000003;
    h$ ^= (milestoneEventListener == null) ? 0 : milestoneEventListener.hashCode();
    h$ *= 1000003;
    h$ ^= (milestones == null) ? 0 : milestones.hashCode();
    h$ *= 1000003;
    h$ ^= (bottomSheetCallback == null) ? 0 : bottomSheetCallback.hashCode();
    h$ *= 1000003;
    h$ ^= (instructionListListener == null) ? 0 : instructionListListener.hashCode();
    h$ *= 1000003;
    h$ ^= (speechAnnouncementListener == null) ? 0 : speechAnnouncementListener.hashCode();
    h$ *= 1000003;
    h$ ^= (bannerInstructionsListener == null) ? 0 : bannerInstructionsListener.hashCode();
    h$ *= 1000003;
    h$ ^= (speechPlayer == null) ? 0 : speechPlayer.hashCode();
    h$ *= 1000003;
    h$ ^= (locationEngine == null) ? 0 : locationEngine.hashCode();
    return h$;
  }

  static final class Builder extends NavigationViewOptions.Builder {
    private DirectionsRoute directionsRoute;
    private Integer lightThemeResId;
    private Integer darkThemeResId;
    private Boolean shouldSimulateRoute;
    private Boolean waynameChipEnabled;
    private String offlineRoutingTilesPath;
    private String offlineRoutingTilesVersion;
    private MapOfflineOptions offlineMapOptions;
    private MapboxNavigationOptions navigationOptions;
    private FeedbackListener feedbackListener;
    private RouteListener routeListener;
    private NavigationListener navigationListener;
    private ProgressChangeListener progressChangeListener;
    private MilestoneEventListener milestoneEventListener;
    private List<Milestone> milestones;
    private BottomSheetBehavior.BottomSheetCallback bottomSheetCallback;
    private InstructionListListener instructionListListener;
    private SpeechAnnouncementListener speechAnnouncementListener;
    private BannerInstructionsListener bannerInstructionsListener;
    private SpeechPlayer speechPlayer;
    private LocationEngine locationEngine;
    Builder() {
    }
    @Override
    public NavigationViewOptions.Builder directionsRoute(DirectionsRoute directionsRoute) {
      if (directionsRoute == null) {
        throw new NullPointerException("Null directionsRoute");
      }
      this.directionsRoute = directionsRoute;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder lightThemeResId(@Nullable Integer lightThemeResId) {
      this.lightThemeResId = lightThemeResId;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder darkThemeResId(@Nullable Integer darkThemeResId) {
      this.darkThemeResId = darkThemeResId;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder shouldSimulateRoute(boolean shouldSimulateRoute) {
      this.shouldSimulateRoute = shouldSimulateRoute;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder waynameChipEnabled(boolean waynameChipEnabled) {
      this.waynameChipEnabled = waynameChipEnabled;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder offlineRoutingTilesPath(@Nullable String offlineRoutingTilesPath) {
      this.offlineRoutingTilesPath = offlineRoutingTilesPath;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder offlineRoutingTilesVersion(@Nullable String offlineRoutingTilesVersion) {
      this.offlineRoutingTilesVersion = offlineRoutingTilesVersion;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder offlineMapOptions(@Nullable MapOfflineOptions offlineMapOptions) {
      this.offlineMapOptions = offlineMapOptions;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder navigationOptions(MapboxNavigationOptions navigationOptions) {
      if (navigationOptions == null) {
        throw new NullPointerException("Null navigationOptions");
      }
      this.navigationOptions = navigationOptions;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder feedbackListener(@Nullable FeedbackListener feedbackListener) {
      this.feedbackListener = feedbackListener;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder routeListener(@Nullable RouteListener routeListener) {
      this.routeListener = routeListener;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder navigationListener(@Nullable NavigationListener navigationListener) {
      this.navigationListener = navigationListener;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder progressChangeListener(@Nullable ProgressChangeListener progressChangeListener) {
      this.progressChangeListener = progressChangeListener;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder milestoneEventListener(@Nullable MilestoneEventListener milestoneEventListener) {
      this.milestoneEventListener = milestoneEventListener;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder milestones(@Nullable List<Milestone> milestones) {
      this.milestones = milestones;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder bottomSheetCallback(@Nullable BottomSheetBehavior.BottomSheetCallback bottomSheetCallback) {
      this.bottomSheetCallback = bottomSheetCallback;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder instructionListListener(@Nullable InstructionListListener instructionListListener) {
      this.instructionListListener = instructionListListener;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder speechAnnouncementListener(@Nullable SpeechAnnouncementListener speechAnnouncementListener) {
      this.speechAnnouncementListener = speechAnnouncementListener;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder bannerInstructionsListener(@Nullable BannerInstructionsListener bannerInstructionsListener) {
      this.bannerInstructionsListener = bannerInstructionsListener;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder speechPlayer(@Nullable SpeechPlayer speechPlayer) {
      this.speechPlayer = speechPlayer;
      return this;
    }
    @Override
    public NavigationViewOptions.Builder locationEngine(@Nullable LocationEngine locationEngine) {
      this.locationEngine = locationEngine;
      return this;
    }
    @Override
    public NavigationViewOptions build() {
      String missing = "";
      if (this.directionsRoute == null) {
        missing += " directionsRoute";
      }
      if (this.shouldSimulateRoute == null) {
        missing += " shouldSimulateRoute";
      }
      if (this.waynameChipEnabled == null) {
        missing += " waynameChipEnabled";
      }
      if (this.navigationOptions == null) {
        missing += " navigationOptions";
      }
      if (!missing.isEmpty()) {
        throw new IllegalStateException("Missing required properties:" + missing);
      }
      return new AutoValue_NavigationViewOptions(
          this.directionsRoute,
          this.lightThemeResId,
          this.darkThemeResId,
          this.shouldSimulateRoute,
          this.waynameChipEnabled,
          this.offlineRoutingTilesPath,
          this.offlineRoutingTilesVersion,
          this.offlineMapOptions,
          this.navigationOptions,
          this.feedbackListener,
          this.routeListener,
          this.navigationListener,
          this.progressChangeListener,
          this.milestoneEventListener,
          this.milestones,
          this.bottomSheetCallback,
          this.instructionListListener,
          this.speechAnnouncementListener,
          this.bannerInstructionsListener,
          this.speechPlayer,
          this.locationEngine);
    }
  }

}
